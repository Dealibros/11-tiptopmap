import { css, Global } from '@emotion/react';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import Image from 'next/image';
import Link, { useEffect, useState } from 'next/link';
import React from 'react';
import Layout from '../components/Layout';
import Map from '../components/onlyMap';
import SearchForm from '../components/searchForm';

// import { myGlobalStyles } from '../styles/myGlobalStyles';

// const main = css`
//   margin-top: 0;
//   /* padding-top: 5rem; */
//   width: 100vw;
//   height: 90vh;
//   background-image: url('../images/portada1.jpg');
//   background-size: cover;
//   position: relative;
// `;

const title = css`
  font-family: 'New Tegomin';
  margin-top: 1rem;
  color: black;
  font-weight: 700;
  font-size: 4.6rem;
  text-align: center;
  margin-bottom:0;
`;

// const portadaStyle = css`
//   min-height: 70vh;
//   height: 5rem;
//   width: 10rem;
// `;
// const isMounted = RenderCompleted();


const mainDiv = css `
display:flex;
height:71vh;
`
const rightDivMap = css`
width:60vw;
`
const leftDiv = css`
width:700px;
`
// const map = css`
// width:1000px;
// height:600px;
// `











export default function Home() {
  const Map = dynamic(
    () => import("../components/onlyMap"),
    {ssr: false,
    loading: () => <h3>Loading</h3>,
    }
  )


// console.log({data})
  return (
    <div>
      <Head>
        <title>TopTip Map</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.svg" />
      </Head>
      <Layout>
          <p css={title}>TopTip Map</p>
        <div css= {mainDiv}>
            <div css={leftDiv}/>
           <div css={rightDivMap}>
            <Map/>
          </div>
         </div>

         {/* <div className="container mx-auto px-10">
        <div className="m-20 w-full lg:w-6/12 mx-auto mb-20">
          <SearchForm action="/search" />

          <hr className="my-10" />

          { data.status === 'OK' && (
            <div className="list">
              { data.candidates.map((place, i) => (
                <map place={place} key={place.place_id} />
              )) }
            </div>
          )}

          { data.status === 'ZERO_RESULTS' && (
            <h2 class="text-2xl font-bold text-center">No Place found, please try refine your search query</h2>
          )}
           </div>
      </div> */}


      </Layout>
    </div>
  );
}


export async function getServerSideProps({ query }) {
  const { q } = query;

  const url = `https://maps.googleapis.com/maps/api/place/findplacefromtext/json?key=${process.env.NEXT_PUBLIC_API_KEY}&inputtype=textquery&input=${q}&fields=formatted_address,name,photos,place_id,types`


  const res = await fetch(url);
  const resJson = await res.json();
  const data = {
    status: resJson.status,
    candidates: resJson.candidates.map(item => {
      let image = ''

      if ('photos' in item) {
        image = `https://maps.googleapis.com/maps/api/place/photo?key=${process.env.API_KEY}&maxwidth=400&photoreference=${item.photos[0].photo_reference}`

      }

      return {
        formatted_address: item.formatted_address,
        name: item.name,
        place_id: item.place_id,
        types: item.types,
        image: image,
      }
    }),
  }

  return {
    props: {
      data,
    }
  }
}